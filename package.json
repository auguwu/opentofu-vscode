{
    "name": "opentofu-vscode",
    "description": "üêª‚Äç‚ùÑÔ∏èü´ñ Visual Studio Code extension for OpenTofu",
    "version": "0.1.3",
    "displayName": "OpenTofu | Visual Studio Code",
    "publisher": "auguwu",
    "icon": "./assets/opentofu.png",
    "type": "module",
    "private": true,
    "author": "Noel Towa <cutie@floofy.dev>",
    "repository": "https://github.com/auguwu/opentofu-vscode",
    "bugs": "https://github.com/auguwu/opentofu-vscode/issues",
    "license": "GPL-3.0-only",
    "main": "out/extension.cjs",
    "categories": [
        "Formatters",
        "Programming Languages"
    ],
    "keywords": [
        "terraform",
        "opentofu",
        "hcl"
    ],
    "engines": {
        "vscode": "^1.80.x"
    },
    "activationEvents": [
        "workspaceContains:**/*.tf",
        "workspaceContains:**/*.tfvars"
    ],
    "contributes": {
        "languages": [
            {
                "id": "opentofu",
                "aliases": [
                    "OpenTofu",
                    "opentofu",
                    "tofu",
                    "hcl"
                ],
                "extensions": [
                    ".tf"
                ],
                "configuration": "./assets/language-configuration.json"
            },
            {
                "id": "opentofu-vars",
                "extensions": [
                    ".tfvars"
                ],
                "configuration": "./assets/language-configuration.json"
            },
            {
                "id": "json",
                "extensions": [
                    ".tfstate"
                ]
            }
        ],
        "grammars": [
            {
                "language": "opentofu",
                "scopeName": "source.hcl.terraform",
                "path": "./assets/syntaxes/terraform.tmGrammar.json"
            },
            {
                "language": "opentofu-vars",
                "scopeName": "source.hcl.terraform",
                "path": "./assets/syntaxes/terraform.tmGrammar.json"
            }
        ],
        "semanticTokenTypes": [
            {
                "id": "hcl-attrName",
                "superType": "property",
                "description": "Attribute name"
            },
            {
                "id": "hcl-blockType",
                "superType": "type",
                "description": "Block type"
            },
            {
                "id": "hcl-blockLabel",
                "superType": "enumMember",
                "description": "Block label"
            },
            {
                "id": "hcl-bool",
                "superType": "keyword",
                "description": "Boolean"
            },
            {
                "id": "hcl-string",
                "superType": "string",
                "description": "String"
            },
            {
                "id": "hcl-number",
                "superType": "number",
                "description": "Number"
            },
            {
                "id": "hcl-objectKey",
                "superType": "parameter",
                "description": "Object key"
            },
            {
                "id": "hcl-mapKey",
                "superType": "parameter",
                "description": "Map key"
            },
            {
                "id": "hcl-keyword",
                "superType": "variable",
                "description": "Keyword"
            },
            {
                "id": "hcl-referenceStep",
                "superType": "variable",
                "description": "Reference step"
            },
            {
                "id": "hcl-typeComplex",
                "superType": "keyword",
                "description": "Type (complex)"
            },
            {
                "id": "hcl-typePrimitive",
                "superType": "keyword",
                "description": "Type (primitive)"
            },
            {
                "id": "hcl-functionName",
                "superType": "function",
                "description": "Function name"
            }
        ],
        "semanticTokenScopes": [
            {
                "scopes": {
                    "hcl-attrName": [
                        "variable.other.property"
                    ],
                    "hcl-blockType": [
                        "entity.name.type"
                    ],
                    "hcl-blockLabel": [
                        "variable.other.enummember"
                    ],
                    "hcl-bool": [
                        "keyword.control"
                    ],
                    "hcl-string": [
                        "string"
                    ],
                    "hcl-number": [
                        "constant.numeric"
                    ],
                    "hcl-objectKey": [
                        "variable.parameter"
                    ],
                    "hcl-mapKey": [
                        "variable.parameter"
                    ],
                    "hcl-keyword": [
                        "keyword.control"
                    ],
                    "hcl-referenceStep": [
                        "variable.other.readwrite"
                    ],
                    "hcl-typeComplex": [
                        "keyword.control"
                    ],
                    "hcl-typePrimitive": [
                        "keyword.control"
                    ],
                    "hcl-functionName": [
                        "support.function"
                    ]
                }
            }
        ],
        "semanticTokenModifiers": [
            {
                "id": "hcl-dependent",
                "description": "Dependent"
            },
            {
                "id": "terraform-data",
                "description": "Data source"
            },
            {
                "id": "terraform-locals",
                "description": "Locals"
            },
            {
                "id": "terraform-module",
                "description": "Module"
            },
            {
                "id": "terraform-output",
                "description": "Output"
            },
            {
                "id": "terraform-provider",
                "description": "Provider"
            },
            {
                "id": "terraform-resource",
                "description": "Resource"
            },
            {
                "id": "terraform-provisioner",
                "description": "Provisioner"
            },
            {
                "id": "terraform-connection",
                "description": "Connection"
            },
            {
                "id": "terraform-variable",
                "description": "Variable"
            },
            {
                "id": "terraform-terraform",
                "description": "Terraform"
            },
            {
                "id": "terraform-backend",
                "description": "Backend"
            },
            {
                "id": "terraform-name",
                "description": "Name"
            },
            {
                "id": "terraform-type",
                "description": "Type"
            },
            {
                "id": "terraform-requiredProviders",
                "description": "Required providers"
            }
        ],
        "snippets": [
            {
                "language": "opentofu",
                "path": "./assets/snippets.json"
            }
        ],
        "commands": [
            {
                "command": "opentofu.openServerLogs",
                "title": "OpenTofu: Open Server Logs"
            },
            {
                "command": "opentofu.apply",
                "title": "OpenTofu: tofu apply"
            },
            {
                "command": "opentofu.init",
                "title": "OpenTofu: tofu init"
            },
            {
                "command": "opentofu.plan",
                "title": "OpenTofu: tofu plan"
            },
            {
                "command": "opentofu.validate",
                "title": "OpenTofu: Validate"
            },
            {
                "command": "opentofu.enableLanguageServer",
                "title": "OpenTofu: Enable Language Server"
            },
            {
                "command": "opentofu.disableLanguageServer",
                "title": "OpenTofu: Disable Language Server"
            },
            {
                "command": "opentofu.fmt",
                "title": "OpenTofu: Format"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "opentofu.openServerLogs",
                    "when": "config.opentofu.lsp.enable == true"
                },
                {
                    "command": "opentofu.init",
                    "when": "config.opentofu.lsp.enable == true"
                },
                {
                    "command": "opentofu.plan",
                    "when": "config.opentofu.lsp.enable == true"
                },
                {
                    "command": "opentofu.apply",
                    "when": "config.opentofu.lsp.enable == true"
                }
            ]
        },
        "configuration": {
            "title": "OpenTofu",
            "properties": {
                "opentofu.statusBar": {
                    "type": "boolean",
                    "default": true,
                    "description": "Shows a status bar on the left-hand side, similar to `rust-analyzer`."
                },
                "opentofu.binary": {
                    "type": "string",
                    "default": "tofu",
                    "description": "Location to the `tofu` binary"
                },
                "opentofu.ignoreSingleFileWarning": {
                    "type": "boolean",
                    "default": true,
                    "description": "If a warning is emitted by the LSP if there is ever a single file."
                },
                "opentofu.validation.enhanced": {
                    "type": "boolean",
                    "default": false,
                    "description": "Provides enhanced validation"
                },
                "opentofu.indexing.ignoreDirectoryNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "A list of directory names that the LSP should ignore when indexing"
                },
                "opentofu.indexing.ignorePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "A list of paths that the LSP should ignore when indexing"
                },
                "opentofu.experimentals.validateOnSave": {
                    "type": "boolean",
                    "default": false,
                    "description": "**EXPERIMENTAL**: Runs the `validate` subcommand on the file that was saved"
                },
                "opentofu.experimentals.prefillRequiredFields": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allows the LSP to pre-fill all required fields."
                },
                "opentofu.lsp.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables the use of OpenTofu's experimental LSP support"
                },
                "opentofu.lsp.binary": {
                    "type": "string",
                    "default": "opentofu-ls",
                    "description": "Binary location to the LSP. Defaults to `opentofu-ls` on the system."
                },
                "opentofu.lsp.args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Arguments to passthrough the LSP server (it'll be after `opentofu-ls serve`)"
                },
                "opentofu.lsp.tcp.port": {
                    "type": "number",
                    "default": null,
                    "description": "TCP port that the LSP will run in, this will use TCP mode."
                },
                "opentofu.lsp.experimentals.requestConcurrency": {
                    "type": "number",
                    "default": null,
                    "description": "Number of RPC requests to process concurrently, using a lower number of 2 is not recommended."
                },
                "opentofu.lsp.experimentals.logFile": {
                    "type": "string",
                    "default": null,
                    "description": "Path to a file to log into support for variables (e.g. timestamp, pid, ppid) via Go templating (`{{varName}}`)"
                }
            }
        }
    },
    "scripts": {
        "update:vscode": "vscode-ext-gen --scope opentofu",
        "build:prod": "./build.ts --prod",
        "publish": "vsce publish --no-dependencies",
        "package": "vsce package --no-dependencies",
        "watch": "vite build --mode development --watch",
        "build": "./build.ts",
        "check": "prettier --check **/*.{js,ts,json,md,yaml}",
        "lint": "eslint -f codeframe --exit-on-fatal-error",
        "fmt": "prettier --write **/*.{js,ts,json,md,yaml}"
    },
    "dependencies": {
        "@noelware/utils": "2.5.1",
        "reactive-vscode": "0.2.19",
        "vscode-languageclient": "9.0.1",
        "which": "5.0.0"
    },
    "devDependencies": {
        "@augu/eslint-config": "5.3.1",
        "@augu/tsconfig": "1.2.0",
        "@stylistic/eslint-plugin": "4.4.0",
        "@types/node": "22.15.29",
        "@types/vscode": "^1.80",
        "@types/which": "3.0.4",
        "@vscode/vsce": "3.4.2",
        "esbuild": "0.25.5",
        "eslint": "9.28.0",
        "eslint-config-prettier": "10.1.5",
        "eslint-formatter-codeframe": "7.32.1",
        "prettier": "3.5.3",
        "typescript": "5.8.3",
        "typescript-eslint": "8.33.0",
        "vscode-ext-gen": "1.0.2"
    }
}
