// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = 'auguwu';
export const name = 'opentofu-vscode';
export const version = '0.1.0';
export const displayName = 'OpenTofu for Visual Studio Code';
export const description = 'üêª‚Äç‚ùÑÔ∏èü´ñ Visual Studio Code extension for OpenTofu';
export const extensionId = `${publisher}.${name}`;

/**
 * Type union of all commands
 */
export type CommandKey =
    | 'opentofu.openServerLogs'
    | 'opentofu.apply'
    | 'opentofu.init'
    | 'opentofu.plan'
    | 'opentofu.validate'
    | 'opentofu.enableLanguageServer'
    | 'opentofu.disableLanguageServer'
    | 'opentofu.fmt';

/**
 * Commands map registed by `auguwu.opentofu-vscode`
 */
export const commands = {
    /**
     * OpenTofu: Open Server Logs
     * @value `opentofu.openServerLogs`
     */
    openServerLogs: 'opentofu.openServerLogs',
    /**
     * OpenTofu: tofu apply
     * @value `opentofu.apply`
     */
    apply: 'opentofu.apply',
    /**
     * OpenTofu: tofu init
     * @value `opentofu.init`
     */
    init: 'opentofu.init',
    /**
     * OpenTofu: tofu plan
     * @value `opentofu.plan`
     */
    plan: 'opentofu.plan',
    /**
     * OpenTofu: Validate
     * @value `opentofu.validate`
     */
    validate: 'opentofu.validate',
    /**
     * OpenTofu: Enable Language Server
     * @value `opentofu.enableLanguageServer`
     */
    enableLanguageServer: 'opentofu.enableLanguageServer',
    /**
     * OpenTofu: Disable Language Server
     * @value `opentofu.disableLanguageServer`
     */
    disableLanguageServer: 'opentofu.disableLanguageServer',
    /**
     * OpenTofu: Format
     * @value `opentofu.fmt`
     */
    fmt: 'opentofu.fmt'
} satisfies Record<string, CommandKey>;

/**
 * Type union of all configs
 */
export type ConfigKey =
    | 'opentofu.statusBar'
    | 'opentofu.binary'
    | 'opentofu.ignoreSingleFileWarning'
    | 'opentofu.validation.enhanced'
    | 'opentofu.indexing.ignoreDirectoryNames'
    | 'opentofu.indexing.ignorePaths'
    | 'opentofu.experimentals.validateOnSave'
    | 'opentofu.experimentals.prefillRequiredFields'
    | 'opentofu.lsp.enable'
    | 'opentofu.lsp.binary'
    | 'opentofu.lsp.args'
    | 'opentofu.lsp.tcp.port'
    | 'opentofu.lsp.experimentals.requestConcurrency'
    | 'opentofu.lsp.experimentals.logFile';

export interface ConfigKeyTypeMap {
    'opentofu.statusBar': boolean;
    'opentofu.binary': string;
    'opentofu.ignoreSingleFileWarning': boolean;
    'opentofu.validation.enhanced': boolean;
    'opentofu.indexing.ignoreDirectoryNames': string[];
    'opentofu.indexing.ignorePaths': string[];
    'opentofu.experimentals.validateOnSave': boolean;
    'opentofu.experimentals.prefillRequiredFields': boolean;
    'opentofu.lsp.enable': boolean;
    'opentofu.lsp.binary': string;
    'opentofu.lsp.args': string[];
    'opentofu.lsp.tcp.port': number | null;
    'opentofu.lsp.experimentals.requestConcurrency': number | null;
    'opentofu.lsp.experimentals.logFile': string | null;
}

export interface ConfigShorthandMap {
    statusBar: 'opentofu.statusBar';
    binary: 'opentofu.binary';
    ignoreSingleFileWarning: 'opentofu.ignoreSingleFileWarning';
    validationEnhanced: 'opentofu.validation.enhanced';
    indexingIgnoreDirectoryNames: 'opentofu.indexing.ignoreDirectoryNames';
    indexingIgnorePaths: 'opentofu.indexing.ignorePaths';
    experimentalsValidateOnSave: 'opentofu.experimentals.validateOnSave';
    experimentalsPrefillRequiredFields: 'opentofu.experimentals.prefillRequiredFields';
    lspEnable: 'opentofu.lsp.enable';
    lspBinary: 'opentofu.lsp.binary';
    lspArgs: 'opentofu.lsp.args';
    lspTcpPort: 'opentofu.lsp.tcp.port';
    lspExperimentalsRequestConcurrency: 'opentofu.lsp.experimentals.requestConcurrency';
    lspExperimentalsLogFile: 'opentofu.lsp.experimentals.logFile';
}

export interface ConfigShorthandTypeMap {
    statusBar: boolean;
    binary: string;
    ignoreSingleFileWarning: boolean;
    validationEnhanced: boolean;
    indexingIgnoreDirectoryNames: string[];
    indexingIgnorePaths: string[];
    experimentalsValidateOnSave: boolean;
    experimentalsPrefillRequiredFields: boolean;
    lspEnable: boolean;
    lspBinary: string;
    lspArgs: string[];
    lspTcpPort: number | null;
    lspExperimentalsRequestConcurrency: number | null;
    lspExperimentalsLogFile: string | null;
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
    key: T;
    default: ConfigKeyTypeMap[T];
}

/**
 * Configs map registered by `auguwu.opentofu-vscode`
 */
export const configs = {
    /**
     * Shows a status bar on the left-hand side, similar to `rust-analyzer`.
     * @key `opentofu.statusBar`
     * @default `true`
     * @type `boolean`
     */
    statusBar: {
        key: 'opentofu.statusBar',
        default: true
    } as ConfigItem<'opentofu.statusBar'>,
    /**
     * Location to the `tofu` binary
     * @key `opentofu.binary`
     * @default `"tofu"`
     * @type `string`
     */
    binary: {
        key: 'opentofu.binary',
        default: 'tofu'
    } as ConfigItem<'opentofu.binary'>,
    /**
     * If a warning is emitted by the LSP if there is ever a single file.
     * @key `opentofu.ignoreSingleFileWarning`
     * @default `true`
     * @type `boolean`
     */
    ignoreSingleFileWarning: {
        key: 'opentofu.ignoreSingleFileWarning',
        default: true
    } as ConfigItem<'opentofu.ignoreSingleFileWarning'>,
    /**
     * Provides enhanced validation
     * @key `opentofu.validation.enhanced`
     * @default `false`
     * @type `boolean`
     */
    validationEnhanced: {
        key: 'opentofu.validation.enhanced',
        default: false
    } as ConfigItem<'opentofu.validation.enhanced'>,
    /**
     * A list of directory names that the LSP should ignore when indexing
     * @key `opentofu.indexing.ignoreDirectoryNames`
     * @default `[]`
     * @type `array`
     */
    indexingIgnoreDirectoryNames: {
        key: 'opentofu.indexing.ignoreDirectoryNames',
        default: []
    } as ConfigItem<'opentofu.indexing.ignoreDirectoryNames'>,
    /**
     * A list of paths that the LSP should ignore when indexing
     * @key `opentofu.indexing.ignorePaths`
     * @default `[]`
     * @type `array`
     */
    indexingIgnorePaths: {
        key: 'opentofu.indexing.ignorePaths',
        default: []
    } as ConfigItem<'opentofu.indexing.ignorePaths'>,
    /**
     * **EXPERIMENTAL**: Runs the `validate` subcommand on the file that was saved
     * @key `opentofu.experimentals.validateOnSave`
     * @default `false`
     * @type `boolean`
     */
    experimentalsValidateOnSave: {
        key: 'opentofu.experimentals.validateOnSave',
        default: false
    } as ConfigItem<'opentofu.experimentals.validateOnSave'>,
    /**
     * Allows the LSP to pre-fill all required fields.
     * @key `opentofu.experimentals.prefillRequiredFields`
     * @default `false`
     * @type `boolean`
     */
    experimentalsPrefillRequiredFields: {
        key: 'opentofu.experimentals.prefillRequiredFields',
        default: false
    } as ConfigItem<'opentofu.experimentals.prefillRequiredFields'>,
    /**
     * Enables the use of OpenTofu's experimental LSP support
     * @key `opentofu.lsp.enable`
     * @default `true`
     * @type `boolean`
     */
    lspEnable: {
        key: 'opentofu.lsp.enable',
        default: true
    } as ConfigItem<'opentofu.lsp.enable'>,
    /**
     * Binary location to the LSP. Defaults to `opentofu-ls` on the system.
     * @key `opentofu.lsp.binary`
     * @default `"opentofu-ls"`
     * @type `string`
     */
    lspBinary: {
        key: 'opentofu.lsp.binary',
        default: 'opentofu-ls'
    } as ConfigItem<'opentofu.lsp.binary'>,
    /**
     * Arguments to passthrough the LSP server (it'll be after `opentofu-ls serve`)
     * @key `opentofu.lsp.args`
     * @default `[]`
     * @type `array`
     */
    lspArgs: {
        key: 'opentofu.lsp.args',
        default: []
    } as ConfigItem<'opentofu.lsp.args'>,
    /**
     * TCP port that the LSP will run in, this will use TCP mode.
     * @key `opentofu.lsp.tcp.port`
     * @default `null`
     * @type `number`
     */
    lspTcpPort: {
        key: 'opentofu.lsp.tcp.port',
        default: null
    } as ConfigItem<'opentofu.lsp.tcp.port'>,
    /**
     * Number of RPC requests to process concurrently, using a lower number of 2 is not recommended.
     * @key `opentofu.lsp.experimentals.requestConcurrency`
     * @default `null`
     * @type `number`
     */
    lspExperimentalsRequestConcurrency: {
        key: 'opentofu.lsp.experimentals.requestConcurrency',
        default: null
    } as ConfigItem<'opentofu.lsp.experimentals.requestConcurrency'>,
    /**
     * Path to a file to log into support for variables (e.g. timestamp, pid, ppid) via Go templating (`{{varName}}`)
     * @key `opentofu.lsp.experimentals.logFile`
     * @default `null`
     * @type `string`
     */
    lspExperimentalsLogFile: {
        key: 'opentofu.lsp.experimentals.logFile',
        default: null
    } as ConfigItem<'opentofu.lsp.experimentals.logFile'>
};

export interface ScopedConfigKeyTypeMap {
    statusBar: boolean;
    binary: string;
    ignoreSingleFileWarning: boolean;
    'validation.enhanced': boolean;
    'indexing.ignoreDirectoryNames': string[];
    'indexing.ignorePaths': string[];
    'experimentals.validateOnSave': boolean;
    'experimentals.prefillRequiredFields': boolean;
    'lsp.enable': boolean;
    'lsp.binary': string;
    'lsp.args': string[];
    'lsp.tcp.port': number | null;
    'lsp.experimentals.requestConcurrency': number | null;
    'lsp.experimentals.logFile': string | null;
}

export const scopedConfigs = {
    scope: 'opentofu',
    defaults: {
        statusBar: true,
        binary: 'tofu',
        ignoreSingleFileWarning: true,
        'validation.enhanced': false,
        'indexing.ignoreDirectoryNames': [],
        'indexing.ignorePaths': [],
        'experimentals.validateOnSave': false,
        'experimentals.prefillRequiredFields': false,
        'lsp.enable': true,
        'lsp.binary': 'opentofu-ls',
        'lsp.args': [],
        'lsp.tcp.port': null,
        'lsp.experimentals.requestConcurrency': null,
        'lsp.experimentals.logFile': null
    } satisfies ScopedConfigKeyTypeMap
};

export interface NestedConfigs {
    opentofu: {
        statusBar: boolean;
        binary: string;
        ignoreSingleFileWarning: boolean;
        validation: {
            enhanced: boolean;
        };
        indexing: {
            ignoreDirectoryNames: string[];
            ignorePaths: string[];
        };
        experimentals: {
            validateOnSave: boolean;
            prefillRequiredFields: boolean;
        };
        lsp: {
            enable: boolean;
            binary: string;
            args: string[];
            tcp: {
                port: number | null;
            };
            experimentals: {
                requestConcurrency: number | null;
                logFile: string | null;
            };
        };
    };
}

export interface NestedScopedConfigs {
    statusBar: boolean;
    binary: string;
    ignoreSingleFileWarning: boolean;
    validation: {
        enhanced: boolean;
    };
    indexing: {
        ignoreDirectoryNames: string[];
        ignorePaths: string[];
    };
    experimentals: {
        validateOnSave: boolean;
        prefillRequiredFields: boolean;
    };
    lsp: {
        enable: boolean;
        binary: string;
        args: string[];
        tcp: {
            port: number | null;
        };
        experimentals: {
            requestConcurrency: number | null;
            logFile: string | null;
        };
    };
}
